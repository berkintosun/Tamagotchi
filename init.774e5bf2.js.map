{"version":3,"sources":["constants.js","ui.js","gameState.js","buttons.js","init.js"],"names":["TICK_RATE","ICONS","RAIN_CHANCE","SCENES","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","writeModal","text","document","querySelector","innerHTML","modFox","state","className","modScene","togglePoopBag","show","classList","toggle","gameState","current","wakeTime","sleepTime","hungryTime","timeToStartCelebrating","timeToEndCelebrating","poopTime","dieTime","scene","tick","console","log","wake","sleep","getHungry","die","startCelebrating","endCelebrating","poop","handleUserAction","icon","blockStates","includes","startGame","feedFox","cleanPoop","changeWeather","determineFoxState","clearTimers","length","bind","initButtons","toggleHighlighted","selectedIcon","addEventListener","buttonClick","event","target","contains","init","nextTimeToTick","Date","now","nextAnimationFrame","requestAnimationFrame"],"mappings":"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","file":"init.774e5bf2.js","sourceRoot":"../src","sourcesContent":["export const TICK_RATE = 3000;\nexport const ICONS = [\"fish\", \"poop\", \"weather\"];\nexport const RAIN_CHANCE = 0.3;\nexport const SCENES = [\"day\", \"rain\"];\nexport const DAY_LENGTH = 20;\nexport const NIGHT_LENGTH = 3;\nexport const getNextHungerTime = (clock) =>\n  Math.floor(Math.random() * 3) + 5 + clock;\nexport const getNextDieTime = (clock) =>\n  Math.floor(Math.random() * 2) + 3 + clock;\nexport const getNextPoopTime = (clock) =>\n  Math.floor(Math.random() * 4) + 4 + clock;\nexport const writeModal = (text) =>\n  (document.querySelector(\n    \".modal\"\n  ).innerHTML = `<div class=\"modal-inner\">${text}</div>`);\n","export function modFox(state) {\n  document.querySelector(\".fox\").className = `fox fox-${state}`;\n}\n\nexport function modScene(state) {\n  document.querySelector(\".game\").className = `game ${state}`;\n}\n\nexport function togglePoopBag(show) {\n  document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\n}\n","import {\n  DAY_LENGTH,\n  getNextDieTime,\n  getNextHungerTime,\n  getNextPoopTime,\n  NIGHT_LENGTH,\n  RAIN_CHANCE,\n  SCENES,\n  writeModal,\n} from \"./constants\";\nimport { modFox, modScene, togglePoopBag } from \"./ui\";\n\nconst gameState = {\n  current: \"INIT\",\n  clock: 0,\n  wakeTime: -1, // sentinel value\n  sleepTime: -1,\n  hungryTime: -1,\n  timeToStartCelebrating: -1,\n  timeToEndCelebrating: -1,\n  poopTime: -1,\n  dieTime: -1,\n  scene: 0,\n  tick() {\n    this.clock++;\n    console.log(\"clock = \", this.clock);\n\n    if (this.clock === this.wakeTime) this.wake();\n    else if (this.clock === this.sleepTime) this.sleep();\n    else if (this.clock === this.hungryTime) this.getHungry();\n    else if (this.clock === this.dieTime) this.die();\n    else if (this.clock === this.timeToStartCelebrating)\n      this.startCelebrating();\n    else if (this.clock === this.timeToEndCelebrating) this.endCelebrating();\n    else if (this.clock === this.poopTime) this.poop();\n    return this.clock;\n  },\n  handleUserAction(icon) {\n    const blockStates = [\"SLEEP\", \"FEEDING\", \"CELEBRATING\", \"HATCHING\"];\n\n    if (blockStates.includes(this.current)) return;\n\n    if ([\"INIT\", \"DEAD\"].includes(this.current)) {\n      this.startGame();\n      return;\n    }\n\n    switch (icon) {\n      case \"fish\":\n        this.feedFox();\n        break;\n\n      case \"poop\":\n        this.cleanPoop();\n        break;\n\n      case \"weather\":\n        this.changeWeather();\n        break;\n\n      default:\n        break;\n    }\n  },\n  startGame() {\n    writeModal(\"\");\n    this.current = \"HATCHING\";\n    this.wakeTime = this.clock + 3;\n    modFox(\"egg\");\n    modScene(\"day\");\n  },\n  wake() {\n    this.current = \"IDLING\";\n    this.wakeTime = -1;\n    this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n    modScene(SCENES[this.scene]);\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungerTime(this.clock);\n    this.determineFoxState();\n  },\n  sleep() {\n    this.current = \"SLEEP\";\n    modFox(\"sleep\");\n    modScene(\"night\");\n    this.clearTimers(); // call it before assigning waketime so it will overwrite the -1 value of timer.\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n  feedFox() {\n    if (this.current !== \"HUNGRY\") return;\n    this.current = \"FEEDING\";\n    this.dieTime = -1;\n    this.poopTime = getNextPoopTime(this.clock);\n    modFox(\"eating\");\n    this.timeToStartCelebrating = this.clock + 2;\n  },\n  poop() {\n    this.current = \"POOPING\";\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    modFox(\"pooping\");\n    this.hungryTime = getNextHungerTime(this.clock);\n  },\n  cleanPoop() {\n    if (this.current === \"POOPING\") {\n      this.current = \"POOP\";\n      this.dieTime = -1;\n      togglePoopBag(true);\n      this.startCelebrating();\n    }\n  },\n  changeWeather() {\n    this.scene = (this.scene + 1) % SCENES.length;\n    modScene(SCENES[this.scene]);\n    this.determineFoxState();\n  },\n  getHungry() {\n    this.current = \"HUNGRY\";\n    this.dieTime = getNextDieTime(this.clock);\n    this.hungryTime = -1;\n    modFox(\"hungry\");\n  },\n  die() {\n    this.current = \"DEAD\";\n    modFox(\"dead\");\n    modScene(\"dead\");\n    this.clearTimers();\n    writeModal(\n      \"Aaah fox is dead :( <br> Click to a button to start a new game!\"\n    );\n  },\n  startCelebrating() {\n    this.current = \"CELEBRATING\";\n    modFox(\"celebrate\");\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = this.clock + 2;\n  },\n  endCelebrating() {\n    this.current = \"IDLING\";\n    this.determineFoxState();\n    this.timeToEndCelebrating = -1;\n    togglePoopBag(false);\n  },\n  determineFoxState() {\n    if (this.current === \"IDLING\") {\n      if (SCENES[this.scene] === \"rain\") modFox(\"rain\");\n      else modFox(\"idling\");\n    }\n  },\n  clearTimers() {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.dieTime = -1;\n    this.hungryTime = -1;\n    this.poopTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n  },\n};\n\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\nexport default gameState;\n","import {ICONS} from './constants';\n\nconst toggleHighlighted = (icon,show) => document.querySelector(`.${ICONS[icon]}-icon`).classList.toggle(\"highlighted\",show);\n\nfunction initButtons(handleUserAction){\n  let selectedIcon = 0; // default active icon (fish one)\n  \n  function buttonClick(event){\n    if(event.target.classList.contains(\"left-btn\")){\n      toggleHighlighted(selectedIcon,false);\n      selectedIcon = (2+selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon,true);\n    }\n    else if(event.target.classList.contains(\"right-btn\")){\n      toggleHighlighted(selectedIcon,false);\n      selectedIcon = (1+selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon,true);\n    }\n    else{\n      handleUserAction(ICONS[selectedIcon]);\n    }\n  }\n  \n  document.querySelector('.buttons').addEventListener(\"click\",buttonClick);\n}\n\nexport default initButtons;\n","import gameState, { handleUserAction } from \"./gameState\";\nimport { TICK_RATE } from \"./constants\";\nimport initButtons from \"./buttons\";\nasync function init() {\n  console.log(\"game starting\");\n  let nextTimeToTick = Date.now();\n  initButtons(handleUserAction);\n\n  function nextAnimationFrame() {\n    const now = Date.now();\n    if (nextTimeToTick <= now) {\n      gameState.tick(); // personal clock ticker\n      nextTimeToTick = now + TICK_RATE;\n    }\n    // Browser function that calls given function when browser idles\n    requestAnimationFrame(nextAnimationFrame);\n  }\n\n  nextAnimationFrame();\n}\n\ninit();\n"]}